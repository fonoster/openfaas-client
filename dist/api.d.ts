/**
 * OpenFaaS API Gateway
 * OpenFaaS API documentation
 *
 * OpenAPI spec version: 0.8.12
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/// <reference types="node" />
import localVarRequest = require('request');
import http = require('http');
import Promise = require('bluebird');
export declare class DeleteFunctionRequest {
    /**
    * Name of deployed function
    */
    'functionName': string;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
export declare class FunctionDefinition {
    /**
    * Name of deployed function
    */
    'service': string;
    /**
    * Network, usually func_functions for Swarm (deprecated)
    */
    'network'?: string;
    /**
    * Docker image in accessible registry
    */
    'image': string;
    /**
    * Process for watchdog to fork
    */
    'envProcess': string;
    /**
    * Overrides to environmental variables
    */
    'envVars'?: {
        [key: string]: string;
    };
    'constraints'?: Array<string>;
    /**
    * A map of labels for making scheduling or routing decisions
    */
    'labels'?: {
        [key: string]: string;
    };
    /**
    * A map of annotations for management, orchestration, events and build tasks
    */
    'annotations'?: {
        [key: string]: string;
    };
    'secrets'?: Array<string>;
    /**
    * Private registry base64-encoded basic auth (as present in ~/.docker/config.json)
    */
    'registryAuth'?: string;
    'limits'?: any;
    'requests'?: any;
    /**
    * Make the root filesystem of the function read-only
    */
    'readOnlyRootFilesystem'?: boolean;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
export declare class FunctionListEntry {
    /**
    * The name of the function
    */
    'name': string;
    /**
    * The fully qualified docker image name of the function
    */
    'image': string;
    /**
    * The amount of invocations for the specified function
    */
    'invocationCount': number;
    /**
    * The current minimal ammount of replicas
    */
    'replicas': number;
    /**
    * The current available amount of replicas
    */
    'availableReplicas': number;
    /**
    * Process for watchdog to fork
    */
    'envProcess': string;
    /**
    * A map of labels for making scheduling or routing decisions
    */
    'labels': {
        [key: string]: string;
    };
    /**
    * A map of annotations for management, orchestration, events and build tasks
    */
    'annotations'?: {
        [key: string]: string;
    };
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
export declare class Info {
    /**
    * The OpenFaaS Provider
    */
    'provider': any;
    /**
    * Version of the Gateway
    */
    'version': any;
    /**
    * Platform architecture
    */
    'arch'?: string;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
export declare class LogEntry {
    /**
    * the function name
    */
    'name'?: string;
    /**
    * the name/id of the specific function instance
    */
    'instance'?: string;
    /**
    * the timestamp of when the log message was recorded
    */
    'timestamp'?: Date;
    /**
    * raw log message content
    */
    'text'?: string;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
export declare class Secret {
    /**
    * Name of secret
    */
    'name': string;
    /**
    * Value of secret in plain-text
    */
    'value'?: string;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
export declare class SecretName {
    /**
    * Name of secret
    */
    'name'?: string;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
export interface Authentication {
    /**
    * Apply authentication settings to header and query params.
    */
    applyToRequest(requestOptions: localVarRequest.Options): void;
}
export declare class HttpBasicAuth implements Authentication {
    username: string;
    password: string;
    applyToRequest(requestOptions: localVarRequest.Options): void;
}
export declare class ApiKeyAuth implements Authentication {
    private location;
    private paramName;
    apiKey: string;
    constructor(location: string, paramName: string);
    applyToRequest(requestOptions: localVarRequest.Options): void;
}
export declare class OAuth implements Authentication {
    accessToken: string;
    applyToRequest(requestOptions: localVarRequest.Options): void;
}
export declare class VoidAuth implements Authentication {
    username: string;
    password: string;
    applyToRequest(_: localVarRequest.Options): void;
}
export declare enum DefaultApiApiKeys {
}
export declare class DefaultApi {
    protected _basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
        basicAuth: HttpBasicAuth;
    };
    constructor(basePath?: string);
    constructor(username: string, password: string, basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: DefaultApiApiKeys, value: string): void;
    set username(username: string);
    set password(password: string);
    /**
     * See https://docs.openfaas.com/reference/async/.
     * @summary Invoke a function asynchronously in OpenFaaS
     * @param functionName Function name
     * @param input (Optional) data to pass to function
     * @param {*} [options] Override http request options.
     */
    asyncFunctionFunctionNamePost(functionName: string, input?: string, options?: any): Promise<{
        response: http.ClientResponse;
        body?: any;
    }>;
    /**
     *
     * @summary Invoke a function defined in OpenFaaS
     * @param functionName Function name
     * @param input (Optional) data to pass to function
     * @param {*} [options] Override http request options.
     */
    functionFunctionNamePost(functionName: string, input?: string, options?: any): Promise<{
        response: http.ClientResponse;
        body?: any;
    }>;
    /**
     *
     * @summary Healthcheck
     * @param {*} [options] Override http request options.
     */
    healthzGet(options?: any): Promise<{
        response: http.ClientResponse;
        body?: any;
    }>;
    /**
     * Internal use for AlertManager, requires valid AlertManager alert JSON
     * @summary Event-sink for AlertManager, for auto-scaling
     * @param body Incoming alert
     * @param {*} [options] Override http request options.
     */
    systemAlertPost(body?: any, options?: any): Promise<{
        response: http.ClientResponse;
        body?: any;
    }>;
    /**
     *
     * @summary Get a summary of an OpenFaaS function
     * @param functionName Function name
     * @param {*} [options] Override http request options.
     */
    systemFunctionFunctionNameGet(functionName: string, options?: any): Promise<{
        response: http.ClientResponse;
        body: FunctionListEntry;
    }>;
    /**
     *
     * @summary Remove a deployed function.
     * @param body Function to delete
     * @param {*} [options] Override http request options.
     */
    systemFunctionsDelete(body: DeleteFunctionRequest, options?: any): Promise<{
        response: http.ClientResponse;
        body?: any;
    }>;
    /**
     *
     * @summary Get a list of deployed functions with: stats and image digest
     * @param {*} [options] Override http request options.
     */
    systemFunctionsGet(options?: any): Promise<{
        response: http.ClientResponse;
        body: Array<FunctionListEntry>;
    }>;
    /**
     *
     * @summary Deploy a new function.
     * @param body Function to deploy
     * @param {*} [options] Override http request options.
     */
    systemFunctionsPost(body: FunctionDefinition, options?: any): Promise<{
        response: http.ClientResponse;
        body?: any;
    }>;
    /**
     *
     * @summary Update a function.
     * @param body Function to update
     * @param {*} [options] Override http request options.
     */
    systemFunctionsPut(body: FunctionDefinition, options?: any): Promise<{
        response: http.ClientResponse;
        body?: any;
    }>;
    /**
     *
     * @summary Get info such as provider version number and provider orchestrator
     * @param {*} [options] Override http request options.
     */
    systemInfoGet(options?: any): Promise<{
        response: http.ClientResponse;
        body: Info;
    }>;
    /**
     *
     * @summary Get a stream of the logs for a specific function
     * @param name Function name
     * @param since Only return logs after a specific date (RFC3339)
     * @param tail Sets the maximum number of log messages to return, &lt;&#x3D;0 means unlimited
     * @param follow When true, the request will stream logs until the request timeout
     * @param {*} [options] Override http request options.
     */
    systemLogsGet(name: string, since?: string, tail?: number, follow?: boolean, options?: any): Promise<{
        response: http.ClientResponse;
        body: LogEntry;
    }>;
    /**
     *
     * @summary Scale a function
     * @param functionName Function name
     * @param input Function to scale plus replica count
     * @param {*} [options] Override http request options.
     */
    systemScaleFunctionFunctionNamePost(functionName: string, input?: string, options?: any): Promise<{
        response: http.ClientResponse;
        body?: any;
    }>;
    /**
     *
     * @summary Remove a secret.
     * @param body Secret to delete
     * @param {*} [options] Override http request options.
     */
    systemSecretsDelete(body: SecretName, options?: any): Promise<{
        response: http.ClientResponse;
        body?: any;
    }>;
    /**
     *
     * @summary Get a list of secret names and metadata from the provider
     * @param {*} [options] Override http request options.
     */
    systemSecretsGet(options?: any): Promise<{
        response: http.ClientResponse;
        body: SecretName;
    }>;
    /**
     *
     * @summary Create a new secret.
     * @param body A new secret to create
     * @param {*} [options] Override http request options.
     */
    systemSecretsPost(body: Secret, options?: any): Promise<{
        response: http.ClientResponse;
        body?: any;
    }>;
    /**
     *
     * @summary Update a secret.
     * @param body Secret to update
     * @param {*} [options] Override http request options.
     */
    systemSecretsPut(body: Secret, options?: any): Promise<{
        response: http.ClientResponse;
        body?: any;
    }>;
}
